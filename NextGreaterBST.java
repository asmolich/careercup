import java.util.ArrayDeque;
import java.util.Queue;

public class NextGreaterBST {
    private static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode(int x) { val = x; }
    }

    private TreeNode rightParent = null;
    private TreeNode leftParent = null;
    private TreeNode leftParentParent = null;

    private TreeNode getSuccessor(TreeNode root, int b) {
        if (root == null) return null;

        TreeNode node = find(root, b);

        if (node == null) {
            return null;
        }

        if (node.right != null) {
            node = node.right;
            while (node.left != null) node = node.left;
            return node;
        } else if (leftParent != null && leftParent.val >= b) {
            return leftParent;
        } else if (rightParent != null && leftParentParent != null && leftParentParent.val >= b) {
            return leftParentParent;
        } else {
            return null;
        }
    }

    private TreeNode find(TreeNode root, int b) {
        if (root == null) return null;

        TreeNode node = root;
        while (node != null) {
            if (b == node.val) return node;
            if (b < node.val) {
                leftParentParent = leftParent;
                leftParent = node;
                node = node.left;
            } else {
                rightParent = node;
                node = node.right;
            }
        }
        return null;
    }

    private TreeNode findRecursive(TreeNode node, int b) {
        if (node == null) return null;

        if (b == node.val) return node;
        if (b < node.val) {
            leftParentParent = leftParent;
            leftParent = node;
            return findRecursive(node.left, b);
        } else {
            rightParent = node;
            return findRecursive(node.right, b);
        }
    }

    @SuppressWarnings("Duplicates")
    private static TreeNode buildBstFromLevelOrder(int[] order) {
        if (order == null || order.length == 0) return null;
        TreeNode head = null;
        Queue<TreeNode> parents = new ArrayDeque<>();
        TreeNode node;
        boolean left = true;
        for (int val : order) {
            node = val == -1 ? null : new TreeNode(val);
            if (head == null) {
                head = node;
                if (head == null) return null;
            }
            if (!parents.isEmpty()) {
                if (left) parents.peek().left = node;
                else parents.poll().right = node;
                left = !left;
            }
            if (node != null) parents.add(node);
        }

        while (!parents.isEmpty()) {
            if (left) parents.peek().left = null;
            else parents.poll().right = null;
            left = !left;
        }

        return head;
    }

    private static void inOrder(TreeNode node) {
        if (node != null) {
            inOrder(node.left);
            System.out.print(node.val);
            System.out.print(", ");
            inOrder(node.right);
        }
    }

    public static void main(String[] args) {
        NextGreaterBST ng = new NextGreaterBST();
        TreeNode root = buildBstFromLevelOrder(new int[]{
            //727, 721, 838, 538, 724, 757, 859, 322, 709, -1, -1, 754, 811, 844, 937, 268, 487, 685, 718, 730, -1, 802, 814, 841, 853, 925, 970, 91, 307, 484, 496, 661, 691, 715, -1, -1, 736, 796, 805, -1, 832, -1, -1, 850, 856, 871, 928, 949, 982, 64, 136, 283, 319, 364, -1, 493, 508, 565, 664, 688, 700, 712, -1, 733, 745, 763, 799, -1, 808, 823, 835, 847, -1, -1, -1, 868, 886, -1, 931, 946, 961, 979, 1000, 4, 67, 127, 148, 271, 292, 316, -1, 346, 460, 490, -1, 502, 523, 562, 616, -1, 673, -1, -1, 694, 703, -1, -1, -1, -1, 742, 748, 760, 775, -1, -1, -1, -1, 820, 829, -1, -1, -1, -1, 862, -1, 883, 916, -1, 934, 940, -1, 955, 964, 976, -1, 988, 1015, 1, 10, -1, 73, 94, 133, 139, 262, -1, 274, 286, 295, 313, -1, 343, 352, 373, 478, -1, -1, 499, 505, 520, 526, 541, -1, 598, 637, 667, 682, -1, 697, -1, 706, 739, -1, -1, 751, -1, -1, 769, 793, 817, -1, 826, -1, -1, 865, 880, -1, 904, 919, -1, -1, -1, 943, 952, 958, -1, 967, 973, -1, 985, 994, 1006, -1, -1, -1, 7, 19, 70, 82, -1, 112, 130, -1, -1, 145, 199, 265, -1, 280, -1, 289, -1, 298, 310, -1, 325, -1, 349, 361, 370, 430, 469, 481, -1, -1, -1, -1, 517, -1, -1, 532, -1, 550, 589, 613, 622, 646, -1, 670, 679, -1, -1, -1, -1, -1, -1, -1, -1, -1, 766, 772, 781, -1, -1, -1, -1, -1, -1, -1, 874, -1, 898, 913, -1, 922, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 991, 997, 1003, 1009, -1, -1, 16, 52, -1, -1, 76, 85, 109, 121, -1, -1, 142, -1, 196, 223, -1, -1, 277, -1, -1, -1, -1, 304, -1, -1, -1, 337, -1, -1, 358, -1, 367, -1, 376, 436, 466, 475, -1, -1, 511, -1, 529, 535, 547, 553, 583, 595, 607, -1, 619, 631, 640, 649, -1, -1, 676, -1, -1, -1, -1, -1, 778, 787, -1, 877, 889, 901, 907, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1012, 13, -1, 49, 55, -1, 79, -1, 88, 106, -1, 118, 124, -1, -1, 193, -1, 202, 244, -1, -1, 301, -1, 328, 340, 355, -1, -1, -1, -1, 403, 433, 442, 463, -1, 472, -1, -1, 514, -1, -1, -1, -1, 544, -1, -1, 559, 568, 586, 592, -1, 604, 610, -1, -1, 625, 634, -1, 643, -1, 655, -1, -1, -1, -1, 784, 790, -1, -1, -1, 895, -1, -1, -1, 910, -1, -1, -1, -1, 22, -1, -1, 61, -1, -1, -1, -1, 97, -1, 115, -1, -1, -1, 154, -1, -1, 214, 232, 247, -1, -1, -1, 331, -1, -1, -1, -1, 385, 415, -1, -1, 439, 448, -1, -1, -1, -1, -1, -1, -1, -1, 556, -1, -1, 571, -1, -1, -1, -1, 601, -1, -1, -1, -1, 628, -1, -1, -1, -1, 652, 658, -1, -1, -1, -1, 892, -1, -1, -1, -1, 25, 58, -1, -1, 103, -1, -1, 151, 178, 211, 217, 229, 241, -1, 253, -1, 334, 379, 394, 409, 418, -1, -1, 445, 454, -1, -1, -1, 574, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, 100, -1, -1, -1, 166, 190, 205, -1, -1, 220, 226, -1, 238, -1, 250, 259, -1, -1, -1, 382, 388, 397, 406, 412, -1, 427, -1, -1, 451, 457, -1, 577, 31, 46, -1, -1, 157, 172, 181, -1, -1, 208, -1, -1, -1, -1, 235, -1, -1, -1, 256, -1, -1, -1, -1, 391, -1, 400, -1, -1, -1, -1, 424, -1, -1, -1, -1, -1, -1, 580, 28, -1, 40, -1, -1, 163, 169, 175, -1, 184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 421, -1, -1, -1, -1, -1, 37, 43, 160, -1, -1, -1, -1, -1, -1, 187, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
            //1060, 445, 1264, 256, 754, 1165, 1294, 118, 271, 520, 787, 1141, 1243, 1273, -1, 109, 181, 268, 370, 514, 565, 775, 847, 1105, 1150, 1210, 1261, 1267, 1282, 67, 112, 163, 193, 265, -1, 298, 394, 451, 517, 541, 736, 760, 784, 835, 1024, 1075, 1132, 1144, 1153, 1207, 1219, 1249, -1, -1, 1270, 1279, 1285, 10, 103, -1, 115, 133, 172, 187, 232, 262, -1, 295, 340, 382, 427, 448, 493, -1, -1, 526, 547, 652, 739, 757, 763, 778, -1, 796, 838, 970, 1039, 1066, 1087, 1126, 1135, -1, 1147, -1, 1156, 1168, -1, 1216, 1222, 1246, 1258, -1, -1, 1276, -1, -1, 1291, 4, 34, 94, 106, -1, -1, 124, 136, 166, 175, 184, 190, 220, 244, 259, -1, 292, -1, 331, 352, 376, 391, 400, 439, -1, -1, 466, 499, 523, 532, 544, 550, 649, 733, -1, 751, -1, -1, -1, 766, -1, 781, 790, 802, -1, 841, 913, 1012, 1030, 1057, 1063, 1069, 1081, 1099, 1117, 1129, -1, 1138, -1, -1, -1, 1159, -1, 1189, 1213, -1, -1, 1240, -1, -1, 1255, -1, -1, -1, 1288, -1, 1, 7, 13, 52, 91, 97, -1, -1, 121, 130, -1, 139, -1, 169, -1, 178, -1, -1, -1, -1, 202, 229, 241, 247, -1, -1, 274, -1, 328, 334, 349, 367, 373, 379, 388, -1, 397, 409, 436, 442, 460, 472, 496, 508, -1, -1, 529, 535, -1, -1, -1, 562, 583, -1, 658, -1, 742, -1, -1, 769, -1, -1, -1, 793, 799, 805, -1, 844, 871, 964, 979, 1018, 1027, 1036, 1045, -1, -1, -1, -1, 1072, 1078, 1084, 1093, 1102, 1108, 1120, -1, -1, -1, -1, -1, 1162, 1186, 1204, -1, -1, 1231, -1, 1252, -1, -1, -1, -1, -1, -1, -1, -1, 19, 49, 61, 85, -1, -1, 100, -1, -1, 127, -1, -1, 145, -1, -1, -1, -1, 196, 217, 226, -1, 238, -1, -1, 250, -1, 283, 316, -1, -1, 337, 343, -1, 361, -1, -1, -1, -1, -1, 385, -1, -1, -1, 403, 424, 433, -1, -1, -1, 454, 463, 469, 475, -1, -1, 505, 511, -1, -1, -1, 538, 559, -1, 580, 637, 655, 664, -1, 745, -1, 772, -1, -1, -1, -1, -1, 820, -1, -1, 859, 880, 934, 967, 973, 988, 1015, 1021, -1, -1, 1033, -1, 1042, 1051, -1, -1, -1, -1, -1, -1, 1090, 1096, -1, -1, -1, 1111, -1, 1123, -1, -1, 1177, -1, 1195, -1, 1225, 1234, -1, -1, 16, 25, 43, -1, 58, 64, 70, 88, -1, -1, -1, -1, 142, 154, -1, 199, 211, -1, 223, -1, 235, -1, -1, 253, 280, 289, 307, 319, -1, -1, -1, 346, 358, 364, -1, -1, -1, 406, 421, -1, 430, -1, -1, 457, -1, -1, -1, -1, -1, 478, 502, -1, -1, -1, -1, -1, 556, -1, 577, -1, 592, 640, -1, -1, 661, 685, -1, 748, -1, -1, 808, 829, 856, 862, 877, 886, 919, 955, -1, -1, -1, 976, 985, 991, -1, -1, -1, -1, -1, -1, -1, -1, 1048, 1054, -1, -1, -1, -1, -1, 1114, -1, -1, 1174, 1180, 1192, 1198, -1, 1228, -1, 1237, -1, -1, 22, 28, 37, 46, 55, -1, -1, -1, -1, 82, -1, -1, -1, -1, 151, 160, -1, -1, 208, 214, -1, -1, -1, -1, -1, -1, 277, -1, 286, -1, 301, 310, -1, 325, -1, -1, 355, -1, -1, -1, -1, -1, 415, -1, -1, -1, -1, -1, -1, 484, -1, -1, 553, -1, 571, -1, 589, 628, -1, 643, -1, -1, 679, 715, -1, -1, -1, 811, 823, 832, 853, -1, -1, 865, 874, -1, 883, 892, 916, 925, 943, 961, -1, -1, 982, -1, -1, 997, -1, -1, -1, -1, -1, -1, 1171, -1, -1, 1183, -1, -1, -1, 1201, -1, -1, -1, -1, -1, -1, -1, 31, -1, 40, -1, -1, -1, -1, 79, -1, 148, -1, 157, -1, 205, -1, -1, -1, -1, -1, -1, -1, -1, 304, -1, 313, 322, -1, -1, -1, 412, 418, 481, 487, -1, -1, 568, 574, 586, -1, 601, 634, -1, 646, 667, 682, 712, 727, -1, 817, -1, 826, -1, -1, 850, -1, -1, 868, -1, -1, -1, -1, 889, 910, -1, -1, 922, 928, 940, 949, 958, -1, -1, -1, 994, 1000, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 490, -1, -1, -1, -1, -1, -1, 598, 604, 631, -1, -1, -1, -1, 676, -1, -1, 697, -1, 724, 730, 814, -1, -1, -1, -1, -1, -1, -1, -1, -1, 907, -1, -1, -1, -1, 931, 937, -1, 946, 952, -1, -1, -1, -1, -1, 1006, -1, 76, -1, -1, 595, -1, -1, 619, -1, -1, 673, -1, 688, 709, 721, -1, -1, -1, -1, -1, 898, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1003, 1009, -1, -1, -1, -1, 607, 622, 670, -1, -1, 694, 703, -1, 718, -1, 895, 904, -1, -1, -1, -1, -1, 610, -1, 625, -1, -1, 691, -1, 700, 706, -1, -1, -1, -1, 901, -1, -1, 613, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 616, -1, -1
            19, 16, 28, 7, -1, 22, 37, 4, 13, -1, 25, 31, -1, 1, -1, 10, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1
        });
        System.out.println("******");
        inOrder(root);
        System.out.println("\n******");
        TreeNode successor = ng.getSuccessor(
            root,
            //211
            //1072
            4
        );
        System.out.println(successor == null ? "null" : successor.val);
    }
}
